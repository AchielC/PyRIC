{
  "name": "PyRIC",
  "tagline": "Pythonic iw (and more) for the Wireless Pentester",
  "body": "# PyRIC 0.1.2: Python Radio Interface Controller\r\n## Linux wireless library for the Python Wireless Developer and Pentester\r\n![](docs/logo.png?raw=true)\r\n\r\n[![License: GPLv3](https://img.shields.io/pypi/l/PyRIC.svg)](https://github.com/wraith-wireless/PyRIC/blob/master/LICENSE)\r\n[![PyPI Version](https://img.shields.io/pypi/v/PyRIC.svg)](https://pypi.python.org/pypi/PyRIC)\r\n[![Downloads per month on PyPI](https://img.shields.io/pypi/dm/PyRIC.svg)](https://pypi.python.org/pypi/PyRIC)\r\n![Supported Python Versions](https://img.shields.io/pypi/pyversions/PyRIC.svg)\r\n![Software status](https://img.shields.io/pypi/status/PyRIC.svg)\r\n[![Documentation Status](https://readthedocs.org/projects/pyric/badge/?version=latest)](http://pyric.readthedocs.io/en/latest/?badge=latest)\r\n\r\n## 1 DESCRIPTION:\r\nPyRIC (is a Linux only) library providing wireless developers and pentesters the\r\nability to identify, enumerate and manipulate their system's wireless cards\r\nprogrammatically in Python. Pentesting applications and scripts written in Python\r\nhave increased dramatically in recent years. However, these tools still rely on\r\nLinux command lines tools to setup and prepare and restore the system for use.\r\nUntil now. Why use subprocess.Popen, regular expressions and str.find to interact\r\nwith your wireless cards? PyRIC is:\r\n\r\n1. Pythonic: no ctypes, SWIG etc. PyRIC redefines C header files as Python and\r\nuses sockets to communicate with the kernel.\r\n2. Self-sufficient: No third-party files used. PyRIC is completely self-contained.\r\n3. Fast: (relatively speaking) PyRIC is faster than using command line tools\r\nthrough subprocess.Popen\r\n4. Parseless: Get the output you want without parsing output from command line\r\ntools. Never worry about newer iw versions and having to rewrite your parsers.\r\n5. Easy: If you can use iw, you can use PyRIC.\r\n\r\nAt it's heart, PyRIC is a Python port of (a subset of) iw and by extension, a\r\nPython port of Netlink w.r.t nl80211 functionality. The original goal of PyRIC\r\nwas to provide a simple interface to the underlying nl80211 kernel support,\r\nhandling the complex operations of Netlink seamlessy while maintaining a minimum\r\nof \"code walking\" to understand, modify and extend. But, why stop there? Since\r\nit's initial inception, PyRIC has grown to include ioctl support to replicate\r\nfeatures of ifconfig such as getting or setting the mac address and has recently\r\nimplemented rkill support to soft block or unblock wireless cards.\r\n\r\n### a. Additions to iw\r\nSeveral \"extensions\" have been added to iw:\r\n* Persistent sockets: pyw provides the caller with functions & ability to pass\r\ntheir own netlink (or ioctl socket) to pyw functions;\r\n* One-time request for the nl80211 family id: pyw stores the family id in a\r\nglobal variable\r\n* Consolidating different \"reference\" values to wireless NICs in one class\r\n(Cards are tuples t=(dev,phy #,ifindex)\r\n\r\nThese are minimal changes but they can improve the performance of any progams\r\nthat needs to access the wireless nic repeatedly as shown in the table below.\r\n\r\n| chset      | Total    | Avg    | Longest   | Shortest |\r\n|------------|----------|--------|-----------|----------|\r\n| Popen(iw)  | 588.3059 | 0.0588 | 0.0682    | 0.0021   |\r\n| one-time   | 560.3559 | 0.0560 | 0.0645    | 0.0003   |\r\n| persistent | 257.8293 | 0.0257 | 0.0354    | 0.0004   |\r\n\r\nThe table shows benchmarks for hop time on a Alfa AWUS036NH 10000 times. Note that\r\nthere is no implication that PyRIC is faster than iw. Rather, the table shows that\r\nPyRIC is faster than using Popen to execute iw. Using one-time sockets, there is\r\na difference of 28 seconds over Popen and iw with a small decrease in the average\r\nhoptime. Not a big difference. However, the performance increased dramatically when\r\npersistent netlink sockets are used with the total time and average hop time nearly\r\nhalved.\r\n\r\n### b. Current State\r\nATT, PyRIC accomplishes my core needs but it is still a work in progress. It\r\ncurrently provides the following:\r\n* enumerate interfaces and wireless interfaces\r\n* identify a cards chipset and driver\r\n* get/set hardware address\r\n* get/set ip4 address, netmask and or broadcast\r\n* turn card on/off\r\n* get supported standards\r\n* get supported commands\r\n* get supported modes\r\n* get dev info\r\n* get phy info\r\n* get/set regulatory domain\r\n* get/set mode\r\n* add/delete interfaces\r\n* enumerate ISM and UNII channels\r\n* block/unblock rfkill devices\r\n\r\nIt also provides limited help functionality concerning nl80211 commands/attributes\r\n(for those who wish to add additional commands). However, it pulls directly from\r\nthe nl80211 header file and may be vague.\r\n\r\n### c. What is PyRIC?\r\n\r\nTo avoid confusion, PyRIC is the system as a whole, including all header files\r\nand \"libraries\" that are required to communicate with the kernel. pyw is a\r\ninterface to these libraries providing specific funtions.\r\n\r\nWhat it does - defines programmatic access to a subset of iw, ifconfig and rkill.\r\nIn short, PyRIC provides Python wireless pentesters the ability to work with\r\nwireless cards directly from Python without having to use command line tools\r\nthrough Popen.\r\n\r\n## 2. INSTALLING/USING:\r\n\r\n### a. Requirements\r\nPyRIC has only two requirements: Linux and Python. There has been very little\r\ntesting (on my side) on kernel 4.x and Python 3 but unit testing confirms\r\nfunctionality on Python 2.7 and kernel 3.13.x.\r\n\r\n### b. Install from Package Manager\r\nObviously, the easiest way to install PyRIC is through PyPI:\r\n\r\n    sudo pip install PyRIC\r\n\r\n### c. Install from Source\r\nThe PyRIC source (tarball) can be downloaded from https://pypi.python.org/pypi/PyRIC\r\nor http://wraith-wireless.github.io/PyRIC. Additionally, the source, as a zip file,\r\ncan be downloaded from https://github.com/wraith-wireless/PyRIC. Once downloaded,\r\nextract the files and from the PyRIC directory run:\r\n\r\n    sudo python setup.py install\r\n\r\n### d. Test without Installing\r\n\r\nIf you just want to test PyRIC out, download your choice from above. After extraction,\r\nmove the pyric folder (the package directory) to your location of choice and from\r\nthere start Python and import pyw. It is very important that you do not try and\r\nrun it from PyRIC which is the distribution directory. This will break the imports\r\npyw uses.\r\n\r\nYou will only be able to test PyRIC from the pyric directory but, if you want to,\r\nyou can add it to your Python path and run it from any program or any location.\r\nTo do so, assume you untared PyRIC to /home/bob/PyRIC. Create a text file named\r\npyric.pth with one line\r\n\r\n    /home/bob/PyRIC\r\n\r\nand save this file to /usr/lib/python2.7/dist-packages (or /usr/lib/python3/dist-packages\r\nif you want to try it in Python 3).\r\n\r\n### e. Stability vs Latest\r\n\r\nKeep in mind that the most stable version and easist installallation but oldest\r\nrelease is on PyPI (installed through pip). The source on http://wraith-wireless.github.io/PyRIC tends to be\r\nnewer but may have some bugs. The most recent source but hardest to install is on\r\nhttps://github.com/wraith-wireless/pyric/releases/ It is not guaranteed to be stable\r\n(as I tend to commit changes periodically while working on the code) and may in\r\nfact not run at all.\r\n\r\n## 3. USING\r\nOnce installed, see examples/pentest.py which covers most pyw functions or read\r\nthrouhg PyRIC.pdf. However, for those impatient types:\r\n\r\n```python\r\nimport pyric          # pyric error and EUNDEF error code\r\nfrom pyric import pyw  iw functionality\r\n```\r\n\r\nwill import the basic requirements and is assumed for the examples below. It is also assumed\r\nthat the system is in the US and has three devices lo, eth0 and wlan0 (only wlan0 of course\r\nbeing wireless). Keep in mind that these examples use one-time sockets.\r\n\r\n### a. Wireless Core Functionality\r\nThese functions do not work with a specific device rather with the system.\r\n\r\n```python\r\n\r\npyw.interfaces() # get all system interfaces\r\n=> ['lo','eth0','wlan']\r\n\r\npyw.isinterface('eth0') # deterimine if eth0 is an interface\r\n=> True\r\n\r\npyw.isinterface('bob0')\r\n=> False\r\n\r\npyw.winterfaces() # get all system wireless interfaces\r\n=> ['wlan0']\r\n\r\npyw.isinterface('eth0') # check eth0 for wireless\r\n=> False\r\n\r\npyw.iswinterface('wlan0')\r\n=> True\r\n\r\npyw.regget() # get the regulatory domain\r\n=> 'US'\r\n\r\npyw.regset('BO') # set the regulatory domain\r\n\r\npyw.regget()\r\n=> 'BO'\r\n```\r\n\r\n### b. Interface Specific\r\nRecall that PyRIC utilizes a Card object - this removes the necessity of having  to\r\nremember what to pass each function i.e. whether it is a device name, physical index\r\nor ifindex.\r\n\r\n```python\r\nw0 = pyw.getcard('wlan0') # get a card for wlan0\r\n\r\nw0\r\n=> Card(phy=0,dev='wlan0',ifindex=2)\r\n```\r\n\r\nYou can also use pyw.devinfo to get a Card object and pyw.devadd will return a card\r\nobject for the newly created virtual interface. The card, w0, will be used throughout\r\nthe remainder of the examples.\r\n\r\n#### i. Setting Mac and IP Addresses\r\n\r\n```python\r\nmac = pyw.macget(w0) # get the hw addr\r\n\r\nmac\r\n=> 'a0:b1:c2:d3:e4:f5'\r\n\r\npyw.down(w0) # turn the card off to set the mac\r\n\r\npyw.macset(w0,'00:1F:32:00:01:00') # lets be a nintendo device\r\n\r\npyw.up(w0) # bring wlan0 back up\r\n\r\npyw.macget(w0) # see if it worked\r\n=> '00:1F:32:00:01:00'\r\n\r\npyw.inetget(w0) # not associated, inet won't return an address\r\n=> (None, None, None)\r\n\r\npyw.inetset(w0,'192.168.3.23','255.255.255.192','192.168.3.63')\r\n=> True\r\n\r\npyw.inetget(w0)\r\n=> ('192.168.3.23', '255.255.255.192', '192.168.3.255')\r\n```\r\n\r\nIt is important to note that (like ifconfig), erroneous values can be set\r\nwhen setting the inet addresses: for example you can set the ip address on\r\n192.168.3.* network with a broadcast address of 10.255.255.255.\r\n\r\n#### ii. Getting Info On Your Card\r\n\r\n```python\r\npyw.devinfo(w0)\r\n=> {'wdev': 4294967297, 'RF': None, 'CF': None, 'mac': '00:c0:ca:59:af:a6',\r\n'mode': 'managed', 'CHW': None, 'card': Card(phy=1,dev=alfa0,ifindex=4)}\r\n\r\npyw.txget(w0)\r\n=> 20\r\n\r\npyw.modeget(w0)\r\n=> 'managed'\r\n\r\npyw.devstds(w0)\r\n=> ['b', 'g', 'n']\r\n\r\npyw.devmodes(w0)\r\n=> ['ibss', 'managed', 'AP', 'AP VLAN', 'wds', 'monitor', 'mesh']\r\n\r\npyw.devcmds(w0)\r\n=> [u'new_interface', u'set_interface', u'new_key', u'start_ap', u'new_station',\r\nu'new_mpath', u'set_mesh_config', u'set_bss', u'authenticate', u'associate',\r\nu'deauthenticate', u'disassociate', u'join_ibss', u'join_mesh', u'set_tx_bitrate_mask',\r\nu'frame', u'frame_wait_cancel', u'set_wiphy_netns', u'set_channel', u'set_wds_peer',\r\nu'probe_client', u'set_noack_map', u'register_beacons', u'start_p2p_device',\r\nu'set_mcast_rate', u'connect', u'disconnect']\r\n\r\npinfo = pyw.phyinfo(w0)\r\n\r\npinfo['scan_ssids']\r\n=> 4\r\n\r\npinfo['retry_short']\r\n=> 7\r\n\r\npinfo['retry_long']\r\n=> 4\r\n\r\npinfo['frag_thresh']\r\n=> 4294967295\r\n\r\npinfo['rts_thresh']\r\n=> 4294967295\r\n\r\npinfo['cov_class']\r\n=> 0\r\n\r\npinfo['freqs']\r\n=>[2412, 2417, 2422, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2467, 2472,\r\n2484]\r\n```\r\n\r\nRead the user guide, or type dir(pyw) in your console to get a full listing\r\nof pyw functions.\r\n\r\nc. Miscelleaneous Utilities\r\nSeveral additional tools are located in the utils directory. Two of these are:\r\n * channels.py: defines ISM and UNII band channels/frequencies and provides\r\n functions to convert between channel and frequency and vice-versa\r\n * ouifetch.py: retrieves and parses oui.txt from the IEEE website and stores\r\n  the oui data in a file that can be read by hardware.py functions\r\nThe others will be demonstrated in the following functions\r\n\r\ni. hardware.py\r\nDriver, chipset and mac address related functions can be found here:\r\n\r\n``` python\r\nimport pyric.utils.hardware as hw\r\n\r\nouis = hw.parseoui() # load the oui dict\r\nlen(ouis)\r\n=> 22128\r\n\r\nmac = 'a0:88:b4:9e:68:58'\r\ndev = 'wlan0'\r\n\r\nhw.oui(mac)\r\n=> 'a0:88:b4'\r\n\r\nhw.ulm(mac)\r\n=> '9e:68:58'\r\n\r\nhw.manufacturer(ouis,mac)\r\n=> 'Intel Corporate'\r\n\r\nhw.randhw(ouis) # generate a random mac address\r\n=>'00:03:f0:5a:a1:fc'\r\n\r\nhw.manufacturer(ouis,'00:03:f0:5a:a1:fc')\r\n=> 'Redfern Broadband Networks'\r\n\r\nhw.ifcard('wlan0') # get driver & chipset\r\n=> ('iwlwifi', 'Intel 4965/5xxx/6xxx/1xxx')\r\n```\r\n\r\nii. rfkill.py\r\nSometimes, your card has a soft block (or hard block) on it and it is not\r\nrecognized by command line tools or pyw. Use rkill to list, turn on or turn\r\noff soft blocks.\r\n\r\n``` python\r\nfrom pyric.utils import rfkill\r\n\r\nrfkill.rfkill_list() # list rfkill devices\r\n=> {'tpacpi_bluetooth_sw': {'soft': True, 'hard': False, 'type': 'bluetooth', 'idx': 1},\r\n    'phy3': {'soft': False, 'hard': False, 'type': 'wlan', 'idx': 5},\r\n    'phy0': {'soft': False, 'hard': False, 'type': 'wlan', 'idx': 0}}\r\n\r\nidx = rfkill.getidx(3)\r\nidx\r\n=> 5\r\n\r\nrfkill.getname(idx)\r\n=> phy3\r\n\r\nrfkill.gettype(idx)\r\n=> 'wlan'\r\n\r\nrfkill.soft_blocked(idx)\r\n=> False\r\n\r\nrfkill.hard_blocked(idx)\r\n=> False\r\n\r\nrfkill.rfkill_block(idx)\r\n\r\nrfkill.list()\r\n=> {'tpacpi_bluetooth_sw': {'soft': False, 'hard': True, 'type': 'bluetooth', 'idx': 1},\r\n    'phy3': {'soft': True, 'hard': True, 'type': 'wlan', 'idx': 5},\r\n    'phy0': {'soft': True, 'hard': True, 'type': 'wlan', 'idx': 0}}\r\n\r\nrfkill.rfkill_unblock(idx)\r\n\r\nrfkill.rfkill_list()\r\n=> {'tpacpi_bluetooth_sw': {'soft': True, 'hard': False, 'type': 'bluetooth', 'idx': 1},\r\n    'phy3': {'soft': False, 'hard': False, 'type': 'wlan', 'idx': 5},\r\n    'phy0': {'soft': False, 'hard': False, 'type': 'wlan', 'idx': 0}}\r\n```\r\n\r\nNote that rfkill_list lists all 'wireless' devices: wlan, bluetooth, wimax, wwan,\r\ngps, fm and nfc. Another important thing to note is that the rfkill index is not\r\nthe same as the interface index.\r\n\r\n#### iii. Virtual Interfaces\r\nIn my experience, virtual interfaces are primarily used to recon, attack or some\r\nother tomfoolery but can also be used to analyze your wireless network. In either\r\ncase, it is generally advised to create a virtual monitor interface and delete\r\nall others (on the same phy) - this makes sure that some external process like\r\nNetworkManager does not interfere with your shenanigans. In the below example,\r\nin addition to creating an interface in monitor mode, we find all interfaces\r\non the same physical index and delete them. You may not need to do this.\r\n\r\nNOTE: When creating a device in monitor mode, you can also set flags (see\r\nNL80211_MNTR_FLAGS in nl80211_h), although some cards (usually atheros) do not\r\nalways obey these requests.\r\n\r\n```python\r\n'monitor' in pyw.devmodes(w0) # make sure we can set wlan0 to monitor\r\n=> True\r\n\r\nm0 = pyw.devadd(w0,'mon0','monitor') # create mon0 in monitor mode\r\n\r\nfor iface in pyw.ifaces(w0): # delete all interfaces\r\n    pyw.devdel(iface[0])     # on the this phy\r\n\r\npyw.up(m0) # bring the new card up to use\r\n\r\npyw.chset(m0,6,None) # and set the card to channel 6\r\n=> True\r\n\r\nm0\r\n=> Card(phy=0,dev='mon0',ifindex=3)\r\n```\r\n\r\nOf course, once you are done, you will probably want to restore your original set\r\nup.\r\n\r\n```python\r\nw0 = pyw.devadd(m0,'wlan0','managed') # restore wlan0 in managed mode\r\n\r\npyw.devdel(m0) # delete the monitor interface\r\n\r\npyw.setmac(w0,mac) # restore the original mac address\r\n\r\npyw.up(w0) # and bring the card up\r\n\r\nw0\r\n=> Card(phy0,dev='wlan0',ifindex=4)\r\n\r\n```\r\n\r\n## 4. EXTENDING:\r\n\r\nExtending PyRIC is fun and easy too, see the user guide PyRIC.pdf.\r\n\r\n## 5. ARCHITECTURE/HEIRARCHY:\r\nBrief Overview of the project file structure. Directories and/or files annotated\r\nwith (-) are not included in pip installs or PyPI downloads\r\n\r\n* PyRIC                   root Distribution directory\r\n  - \\_\\_init\\_\\_.py       initialize distrubution PyRIC module\r\n  - examples              example folder\r\n    + pentest.py          create wireless pentest environment example\r\n    + device_details.py   display device information\r\n  - tests (-)             test folder\r\n    + pyw.unittest.py     unit test for pyw functions\r\n  - docs                  User Guide resources\r\n    + nlsend.png (-)      image for user guide\r\n    + nlsock.png (-)      image for user guide\r\n    + PyRIC.tex (-)       User tex file\r\n    + PyRIC.bib (-)       User Guide bibliography\r\n    + PyRIC.pdf           User Guide\r\n  - setup.py              install file\r\n  - setup.cfg             used by setup.py\r\n  - MANIFEST.in           used by setup.py\r\n  - README.md             this file\r\n  - LICENSE               GPLv3 License\r\n  - TODO                  todos for PyRIC\r\n  - pyric                 package directory\r\n    + \\_\\_init\\_\\_.py     initialize pyric module\r\n    + pyw.py              wireless nic functionality\r\n    + utils               utility directory\r\n     * \\_\\_init\\_\\_.py    initialize utils module\r\n     * channels.py        802.11 ISM/UNII freqs. & channels\r\n     * hardware.py        device, chipset and mac address utility functions\r\n     * rfkill.py          rfkill functions\r\n     * ouifetch.py        retrieve and store oui dict from IEEE\r\n     * data               data folder for ouis\r\n      - oui.txt           oui file fetched from IEEE\r\n    + net                 linux header ports\r\n      * \\_\\_init\\_\\_.py   initialize net subpackage\r\n      * if_h.py           inet/ifreq definition\r\n      * sockios_h.py      socket-level I/O control calls\r\n      * genetlink_h.py    port of genetlink.h\r\n      * netlink_h.py      port of netlink.h\r\n      * policy.py         defines attribute datatypes\r\n      * wireless          wireless subpackage\r\n        - \\_\\_init\\_\\_.py initialize wireless subpackage\r\n        - nl80211_h.py    nl80211 constants\r\n        - nl80211_c.py    nl80211 attribute policies\r\n        - rfkill_h.py     rfkill header file\r\n    + lib                 library subpackages\r\n      * \\_\\_init\\_\\_.py   initialize lib subpackage\r\n      * libnl.py          netlink helper functions\r\n      * libio.py          sockios helper functions\r\n    + nlhelp              netlinke documentation/help\r\n      * nsearch.py        nl80211 search\r\n      * commands.help     nl80211 commands help data\r\n      * attributes.help   nl80211 attributes help data",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}