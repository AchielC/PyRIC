6) find a better way to get supported standards of a card
 o once complete phyinfo should give us enought data to determine the standards
  the Card supports
8) Two commands that would add information of minor value
 o ethtool. uses ioctl but does not follow same pattern as ifconfig seems
    to use
  - ethtool -i <dev> gives driver information including firmware-version
  - ethtool -S <dev> gives some statistics on rx/tx
 and udevadm (does what hardware.py does)
 11) tried NL80211_CMD_GET_WIPHY, setting _WIPHY_TX_POWER_LEVEL but did
  not return the current power level - currently cannot find anything in nl80211.h
  that could be used to get tx power
 17) distro tests
  o openSUSE
  o RedHat/Fedora
  o Debian (g2g)
  o Arch
  o CentOs (?)
  o slackware
  o dd-wrt/OpenWRT
 21) look at NL80211_CMD_START_AP - no need to try and recreate the wheel by
  replicate hostap but could be useful
 22) txset
   o NOTE: the following is consistent with what iw gives us
   o when using dBm
    - get Operation not supported for setting tx power (see pyw.txset)
    - have tried using the ifindex and phy. Both methods are accepted, returning
     only Errno 95.
   o when using mBm
    - no errors reported but tx power is not changed
   o Is the operation not supported by my cards? or is it not supported by the
     kernel?
 23) Unknown Command 104. After updating to kernel 4, iw phy <phy> info returns
  a Unknown command (104). pyw.phyinfo does not return this.
   - iw 3.17 being used
   - command 104 is NL80211_CMD_SET_QOS_MAP
   - iw->util.c:
   const char *command_name(enum nl80211_commands cmd)
   {
	if (cmd <= NL80211_CMD_MAX && commands[cmd])
		return commands[cmd];
	sprintf(cmdbuf, "Unknown command (%d)", cmd);
	return cmdbuf;
   }

   iw's nl80211.h defines NL80211_CMD_SET_QOS_MAP but util.c does not specify
   this command in commands which explains the unknown command.
   - I've gone through the stream returned from the kernel for a wiphy request
   and pyw is not getting this command
   - It does not look like iw is hardcoding this but I cannot see any other way.
   - If this command was being returned, pyw would correctly identify it as
    NL80211_CMD_SET_QOS_MAP - need to identify a card that supports this command
    and determine that pyw does correctly identify it
  26) need to parse dumps NLM_F_DUMP, for now we're good with link etc, so long
   as the card is connected but it will come up eventually
  29) figure out how to parse the information element in pyw.link - there's some
   good shit in it including the router os, type
  31) add VHT processing to sta_info bitrate
  32) should we move wraith.standards.mcs here? It's only used once in PyRIC but
   might make more sense here regardless. If so, we need to fix the "Table" IAW
   IEEE Std 802.11-2012 Table 20-35
  33) seq. # out of order error messages when preceding (persistent) socket.send
   resulted in error
  35) iw connect (on open) returns status of successful connect but card is
   not connected -> move to wpa_supplicant to see how they do it
  36) do we need to write a find nested attribute? so we don't need to go iterate
    a list of attributes to find one
  39) parsing wiphy_bands
   o _HT_MCS_SET: a 16-bit attr containing the MCS set as defined in 802.11n (find this)
   o _HT_CAPA: as in the HT information IE
  40) look at packing netlink messages to ensure nesting still works
  41) would it be worthwhile to have nested return a tuple
      t = (index,data)
     instead of the function calling pulling index out, then parsing data?
  42) is there a simple way to set the format strings as constants keeping in
   mind that things like strings require a length in the format string
  43) add nameset (iw phy <phy> set name <new name>
  45) find out if some the 'flags' for bands are actually supported such as
   HT40+ which should be disabled for channel 11